# -*- coding: utf-8 -*-
from __future__ import absolute_import

from .base import HttpResponseWrapperBase, HttpRequestWrapperBase, HttpTransactionWrapperBase


class ScrapyTransactionWrapper(HttpTransactionWrapperBase):
    """
    This is a wrapper class for wrapping an HTTP request and response as generated by Scrapy.
    """

    # Class Members

    _request_wrapper = None
    _response_wrapper = None

    # Instantiation

    # Static Methods

    # Class Methods

    # Public Methods

    # Protected Methods

    # Private Methods

    # Properties

    @property
    def request(self):
        if self._request_wrapper is None:
            self._request_wrapper = ScrapyRequestWrapper(self.wrapped_data.request)
        return self._request_wrapper

    @property
    def request_duration(self):
        return 0

    @property
    def response(self):
        if self._response_wrapper is None:
            self._response_wrapper = ScrapyResponseWrapper(self.wrapped_data)
        return self._response_wrapper

    # Representation and Comparison


class ScrapyRequestWrapper(HttpRequestWrapperBase):
    """
    This is a wrapper class for wrapping an HTTP request sent by Scrapy.
    """

    # Class Members

    _header_tuples = None

    # Instantiation

    # Static Methods

    # Class Methods

    # Public Methods

    # Protected Methods

    # Private Methods

    # Properties

    @property
    def headers(self):
        if self._header_tuples is None:
            tuples = []
            for k, v in self.wrapped_data.headers.iteritems():
                if isinstance(v, list):
                    for header_value in v:
                        tuples.append((k, header_value))
                else:
                    tuples.append((k, v))
            self._header_tuples = tuples
        return self._header_tuples

    @property
    def method_string(self):
        return self.wrapped_data.method

    @property
    def requested_url(self):
        return self.wrapped_data.url

    # Representation and Comparison


class ScrapyResponseWrapper(HttpResponseWrapperBase):
    """
    This is a wrapper class for wrapping an HTTP response retrieved by Scrapy.
    """

    # Class Members

    _header_tuples = None

    # Instantiation

    # Static Methods

    # Class Methods

    # Public Methods

    # Protected Methods

    # Private Methods

    # Properties

    @property
    def content(self):
        return self.wrapped_data.body

    @property
    def encoding(self):
        return None

    @property
    def headers(self):
        if self._header_tuples is None:
            tuples = []
            for header_key in self.wrapped_data.headers.keys():
                for header_value in self.wrapped_data.headers.getlist(header_key):
                    tuples.append((header_key, header_value))
            self._header_tuples = tuples
        return self._header_tuples

    @property
    def status_code(self):
        return self.wrapped_data.status

    # Representation and Comparison
